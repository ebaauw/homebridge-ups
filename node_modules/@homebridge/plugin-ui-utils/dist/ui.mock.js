"use strict";
/* eslint-disable @typescript-eslint/no-empty-function */
/* eslint-disable @typescript-eslint/no-unused-vars */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockHomebridgeUiFormHelper = exports.MockHomebridgeUiToastHelper = exports.MockHomebridgePluginUi = void 0;
class MockHomebridgePluginUi extends EventTarget {
    constructor() {
        super();
        this.mockPluginConfig = [];
        this.mockPluginSchema = {
            pluginAlias: 'HomebridgeTest',
            pluginType: 'platform',
        };
        this.plugin = {
            name: 'homebridge-test',
            description: 'description sample text',
            verifiedPlugin: false,
            installPath: '/path/to/plugin',
            latestVersion: 'v1.0.0',
            installedVersion: 'v1.0.0',
            updateAvailable: false,
            globalInstall: true,
            settingsSchema: true,
            publicPackage: true,
            links: [],
            funding: [],
        };
        this.serverEnv = {
            env: {
                ableToConfigureSelf: true,
                enableAccessories: true,
                enableTerminalAccess: true,
                homebridgeInstanceName: 'Homebridge 1B77',
                nodeVersion: 'v14.15.0',
                packageName: 'homebridge-config-ui-x',
                packageVersion: '4.32.1',
                platform: 'darwin',
                runningInDocker: false,
                runningInLinux: false,
                dockerOfflineUpdate: false,
                serviceMode: true,
                temperatureUnits: 'c',
                lang: null,
                instanceId: 'eca2e929f20e8a1292893a2852cba6c10d5efb1a77e20238ce9fe2da8da75b88',
            },
            formAuth: true,
            theme: 'auto',
            serverTimestamp: new Date().toISOString(),
        };
        this.toast = new MockHomebridgeUiToastHelper();
        this.dispatchEvent(new Event('ready'));
    }
    fixScrollHeight() { }
    closeSettings() { }
    showSpinner() { }
    hideSpinner() { }
    showSchemaForm() { }
    hideSchemaForm() { }
    endForm() { }
    createForm(schema, data) {
        return new MockHomebridgeUiFormHelper(this, schema, data);
    }
    async getPluginConfig() {
        return this.mockPluginConfig;
    }
    async updatePluginConfig(pluginConfig) {
        this.mockPluginConfig = pluginConfig;
        return this.mockPluginConfig;
    }
    async savePluginConfig() { }
    async getPluginConfigSchema() {
        return this.mockPluginSchema;
    }
    async request(path, body) {
        return {};
    }
    async i18nCurrentLang() {
        return 'en';
    }
    async i18nGetTranslation() {
        return {};
    }
    async getCachedAccessories() {
        return [];
    }
}
exports.MockHomebridgePluginUi = MockHomebridgePluginUi;
class MockHomebridgeUiToastHelper {
    success(message, title) { }
    error(message, title) { }
    warning(message, title) { }
    info(message, title) { }
}
exports.MockHomebridgeUiToastHelper = MockHomebridgeUiToastHelper;
class MockHomebridgeUiFormHelper {
    constructor(parent, schema, data) { }
    end() { }
    onChange(fn) { }
}
exports.MockHomebridgeUiFormHelper = MockHomebridgeUiFormHelper;
//# sourceMappingURL=ui.mock.js.map